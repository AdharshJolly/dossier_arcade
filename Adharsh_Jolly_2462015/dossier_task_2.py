# -*- coding: utf-8 -*-
"""Dossier Task 2.ipynb

Automatically generated by Colab.


## Data Cleaning and Pre-Processing
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Importing data from the csv file
data = pd.read_csv("./climate_change_impact_on_agriculture_2024.csv")

# print(data)

# checking for null values in the data
null_values = data[data.isnull().any(axis=1)]
print(null_values.to_string())

# Separate numeric and categorical columns
numeric_cols = data.select_dtypes(include=["float64", "int64"]).columns
categorical_cols = data.select_dtypes(include=["object"]).columns

for col in numeric_cols:
    data[col] = data[col].astype(float)

"""## Exploring and Analysing Data"""

# Basic information about the dataset
data.info()

# summary statistics of the numerical columns
data.describe()

# Finding all the unique regions
data["Region"].unique()

# Finding the frequency of individual regions
data["Region"].value_counts()

"""## Data Visualizations"""

# importing required libraries
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns

# Plotting a box plot before removing the outliners
fig, axs = plt.subplots(11, 1, figsize=(7, 30))

for i, col in enumerate(numeric_cols):
    axs[i].boxplot(data[col], vert=False)
    axs[i].set_ylabel(col)

plt.show()

"""#### Removing Outliners"""


def remove_outliers(data):
    numeric_cols = data.select_dtypes(include=["float64", "int64"]).columns
    for col in numeric_cols:
        Q1 = data[col].quantile(0.25)
        Q3 = data[col].quantile(0.75)
        IQR = Q3 - Q1
        # Filter the DataFrame to exclude outliers
        data = data[(data[col] >= (Q1 - 1.5 * IQR)) & (data[col] <= (Q3 + 1.5 * IQR))]
    return data


cleaned_data = remove_outliers(data)

cleaned_data_numeric_cols = cleaned_data.select_dtypes(
    include=["float64", "int64"]
).columns
num_columns = len(cleaned_data_numeric_cols)

"""#### Plotting the graphs"""

# Create a figure with multiple vertical subplots, one for each column
fig, axs = plt.subplots(num_columns, 1, figsize=(10, num_columns * 2))


for i, col in enumerate(cleaned_data_numeric_cols):
    # Create a horizontal box plot for the current column
    axs[i].boxplot(cleaned_data[col], vert=False)
    axs[i].set_ylabel(col)
    axs[i].set_title(f"Box Plot of {col}")
    axs[i].grid(axis="x")

plt.tight_layout()

plt.show()

# Creating subplots
fig, axs = plt.subplots(num_columns, 1, figsize=(8, num_columns * 2))

# Looping through each column and create a vertical box plot
for i, col in enumerate(cleaned_data_numeric_cols):
    axs[i].boxplot(cleaned_data[col])
    axs[i].set_title(col)

plt.tight_layout()
plt.show()

# Create a DataFrame with box plots for each column
fig = px.box(cleaned_data[numeric_cols])

fig.show()

# Create a list to hold all the box plot traces
fig = go.Figure()

for col in cleaned_data[numeric_cols].columns:
    fig.add_trace(go.Box(y=cleaned_data[col], name=col))

fig.update_layout(
    title="Interactive Box Plots",
    xaxis_title="Columns",
    yaxis_title="Values",
    showlegend=False,
)

fig.show()

# Plotting average Economic Impact by Country
plt.figure(figsize=(10, 6))
data.groupby("Country")["Economic_Impact_Million_USD"].mean().plot(
    kind="bar", color="skyblue"
)
plt.title("Average Economic Impact by Country")
plt.xlabel("Country")
plt.ylabel("Average Economic Impact (Million USD)")
plt.xticks(rotation=90)
plt.show()

# Plotting the crop yield with respect to the region
plt.figure(figsize=(10, 6))
data.groupby("Region")["Crop_Yield_MT_per_HA"].mean().plot(kind="bar")
plt.title("Average Crop Yield by Region")
plt.xlabel("Region")
plt.ylabel("Average Crop Yield (MT per HA)")
plt.xticks(rotation=90)
plt.show()

countries = data["Country"].unique()

# Plotting histograms of CO2 emissions for each country
for country in countries:
    plt.figure(figsize=(8, 5))
    country_data = data[data["Country"] == country]  # Filter data for each country
    plt.hist(
        country_data["CO2_Emissions_MT"], bins=10, color="lightgreen", edgecolor="black"
    )
    plt.title(f"Distribution of CO2 Emissions in {country}")
    plt.xlabel("CO2 Emissions (MT)")
    plt.ylabel("Frequency")
    plt.show()

# Plotting Average Temperature by Country
plt.figure(figsize=(12, 6))

data.groupby("Country")["Average_Temperature_C"].mean().plot(
    kind="bar", color="lightcoral", edgecolor="black"
)

plt.title("Average Temperature by Country")
plt.xlabel("Country")
plt.ylabel("Average Temperature (Â°C)")
plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

# Box plot to show precipitation with respect to region
plt.figure(figsize=(15, 6))

sns.boxplot(x="Region", y="Total_Precipitation_mm", data=data)

plt.title("Box Plot of Precipitation by Region")
plt.xlabel("Region")
plt.ylabel("Precipitation (mm)")
plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

# Bar plot to show mean soil health index with respect to region
plt.figure(figsize=(12, 6))

sns.barplot(
    x="Region",
    y="Soil_Health_Index",
    hue="Region",
    data=data,
    palette="tab10",
    errorbar=None,
)

plt.title("Bar Plot of Soil Health Index by Region")
plt.xlabel("Region")
plt.ylabel("Average Soil Health Index")
plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

# Bar plot showing the pesticide and fertilizer use with respect to the regions
plt.figure(figsize=(20, 7))

data_melted = data.melt(
    id_vars="Region",
    value_vars=["Pesticide_Use_KG_per_HA", "Fertilizer_Use_KG_per_HA"],
    var_name="Type",
    value_name="Usage",
)

sns.barplot(
    x="Region", y="Usage", hue="Type", data=data_melted, palette="Set1", errorbar=None
)

plt.title("Grouped Bar Plot of Pesticide and Fertilizer Use by Region")
plt.xlabel("Region")
plt.ylabel("Average Usage (kg per HA)")
plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

# Pie Chart of Adaptation Strategies adopted all over

strategy_counts = data["Adaptation_Strategies"].value_counts()

plt.figure(figsize=(10, 8))

plt.pie(
    strategy_counts,
    labels=strategy_counts.index,
    autopct="%1.1f%%",
    colors=sns.color_palette("Set2"),
)

plt.title("Distribution of Adaptation Strategies used")

plt.tight_layout()
plt.show()

# Pie Chart of Crop Type distribution

strategy_counts = data["Crop_Type"].value_counts()

plt.figure(figsize=(10, 8))

plt.pie(
    strategy_counts,
    labels=strategy_counts.index,
    autopct="%1.1f%%",
    colors=sns.color_palette("Set2"),
)

plt.title("Distribution of Crop Types")

plt.tight_layout()
plt.show()
